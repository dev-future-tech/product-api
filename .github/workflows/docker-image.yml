name: Docker Image CI

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifactId: ${{ steps.artifactId.outputs.artifactId}}
      artifactVersion: ${{ steps.version.outputs.artifactVersion}}
    steps:
      - uses: actions/checkout@v3
      - id: java-setup
        name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: maven
      - id: build
        name: Execute build
        run: ./mvnw clean verify
      - id: release-version
        name: Get release version
        run: ./mvnw release:prepare -DdryRun=true
      - id: artifactId
        name: Get ArtifactId
        run: |
          echo "::set-output name=artifactId::$(./mvnw -f pom.xml.tag help:evaluate -Dexpression=project.artifactId -q -DforceStdout)"
      - id: version
        name: Get Artifact New Version
        run: |
          echo "::set-output name=artifactVersion::$(./mvnw -f pom.xml.tag help:evaluate -Dexpression=project.version -q -DforceStdout)"
      - id: cleanup
        name: Reverse release dry run
        run: ./mvnw release:clean

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - id: java-setup
        name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: maven
      - id: git_config
        name: Configure Git User
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
      - id: release
        name: Release to packages
        run: |
          ./mvnw release:prepare release:perform -B -s .maven_settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}

# Can we download the package that was just published instead of building again?
  containerize:
    runs-on: ubuntu-latest
    needs: [build,release]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: $GITHUB_REF/tags/${{needs.build.outputs.artifactVersion}}
      - id: docker_login
        name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_SECRET }}
      - id: build_image
        name: Build Docker image - no tests
        run: ./mvnw clean verify -DskipTests=true jib:dockerBuild
      - id: docker_push
        name: Push to DockerHub
        run: docker push anthonyikeda/${{needs.build.outputs.artifactId}}:${{needs.build.outputs.artifactVersion}}
